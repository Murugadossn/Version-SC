<?php
/**
 * @file
 * 
 * Progress framework for keeping track of progresses
 * 
 * @todo Force MyISAM for table {progress} to avoid transaction/isolation level problems, and use INSERT DELAYED for performance?
 */

define('PROGRESS_AGE', 86400);

/**
 * Initialize a progress
 *
 * @param string $name
 *   Name of progress
 * @param string $message
 *   Message for progress
 * @return mixed
 *   Result from db_query()
 */
function progress_initialize_progress($name, $message) {
  progress_remove_progress($name);
  $current = microtime(TRUE);
  return db_query("INSERT INTO {progress} (name, progress, message, start, current) VALUES('%s', %f, '%s', %f, %f)",
    $name, $progress, $message, $current, $current);
}

/**
 * Set progress
 *
 * @param string $name
 *   Name of progress
 * @param string $message
 *   Message for progress
 * @param double $progress
 *   Current progress (0 - 1)
 * @return mixed
 *   Result from db_query()
 */
function progress_set_progress($name, $message, $progress) {
  $current = microtime(TRUE);
  return db_query("
    UPDATE {progress} SET progress = %f, message = '%s', current = %f WHERE name = '%s'",
    $progress, $message, $current, $name
  );
}

/**
 * Set intervalled progress
 * Use when you don't need to spam the progress table every time.
 *
 * @param string $name
 *   Name of progress
 * @param string $message
 *   Message for progress
 * @param double $progress
 *   Current progress (0 - 1)
 * @param double $interval
 *   Interval in seconds
 * @return mixed
 *   Result from db_query()
 */
function progress_set_intervalled_progress($name, $message, $progress, $interval = NULL) {
  static $set = array();
  if (isset($interval, $set[$name])) {
    if ($set[$name] + $interval > microtime(TRUE)) {
      return TRUE;
    }
  }
  $result = progress_set_progress($name, $message, $progress);
  $set[$name] = microtime(TRUE);
  return $result;
}

/**
 * Get progress
 *
 * @param string $name
 *   Name of progress
 * @return object
 *   Object containing all the progress data
 */
function progress_get_progress($name) {
  return db_fetch_object(db_query("SELECT name, progress, message, start, end, current FROM {progress} WHERE name = '%s'", $name));
}

/**
 * End a progress. Sets to 100% (=1)
 *
 * @param string $name
 *   Name of progress
 * @param string $message
 *   Message for progress
 * @return boolean
 *   TRUE on success, FALSE on fail
 */
function progress_end_progress($name, $message) {
  $current = microtime(TRUE);
  return db_query("
    UPDATE {progress} SET progress = %f, message = '%s', end = %f WHERE name = '%s'",
    $progress, $message, $current, $name
  );
}

/**
 * Remove a progress
 *
 * @param string $name
 *   Name of progress
 * @return boolean
 *   TRUE on success, FALSE on fail
 */
function progress_remove_progress($name) {
  return db_query("DELETE FROM {progress} WHERE name = '%s'", $name);
}

/**
 * Get all progresses
 *
 * @return array
 *   Array of objects containing all progress data
 */
function progress_get_progresses() {
  $progresses = array();
  $result = db_query("SELECT name, progress, message, start, end, current FROM {progress}");
  while ($progress = db_fetch_object($result)) {
    $progresses[$progress->name] = $progress;
  }
  return $progresses;
}

/**
 * Estimate completion time of a progress
 *
 * @param object $progress
 *   Progress object
 * @return double
 *   Estimated unix timestamp of completion in microseconds
 */
function progress_estimate_completion($progress) {
  if ($progress->progress) {
    $progress->estimate = $progress->start + 1 / $progress->progress * ($progress->current - $progress->start);
  }
  else {
    $progress->estimate = NULL;
  }
  return $progress->estimate;
}

/**
 * Implementation of hook_cron().
 * 
 * Clean up finished progresses
 */
function progress_cron() {
  db_query("DELETE FROM {progress} WHERE end > 0 AND end < %d", time() - variable_get('progress_age', PROGRESS_AGE));
}

/**
 * Implementation of hook_cronapi().
 */
function progress_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array('progress_cron' => t('Cleanup old progresses'));
  }
}
