<?php
// $Id: profile_taxonomy.module,v 1.6 2010/05/27 22:43:05 gnindl Exp $

/**
 * @file profile_taxonomy.module
 * This module enables the assignment of taxonomy terms to user profiles. This is
 * done by enhancing existing profile field types which can pick vocabularies as
 * data sources. The user can then select the terms of the profile field.
 */

/**
 * Implementation of hook_menu().
 * Menu callbacks/entry points of profile taxonomy module.
 * @return
 *   array of menu items
 */
function profile_taxonomy_menu() {

  $items = array();

  //module menu item is also root of the tabbed views in the dialog.
  $items['profile_taxonomy'] = array(
    'access arguments' => FALSE,
  );
  
  $items['profile_taxonomy/list_vocabulary_terms'] = array(
    'page callback' => 'profile_taxonomy_list_vocabulary_terms',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback returning a list of all term names belonging
 * to a certain vocabulary. The output is returned as a JSON string.
 * @param $vid
 *   vocabulary id
 */
function profile_taxonomy_list_vocabulary_terms($vid) {
  //get only the values, ommit the keys of taxonomy terms
  drupal_json(array_values(_profile_taxonomy_list_vocabulary_terms($vid)));
}


/**
 * hook_init() invoked when module is initialized on runtime.
 */
function profile_taxonomy_init() {
  module_load_include('inc', 'profile_taxonomy', 'profile_taxonomy.api'); //include API as data access layer
}

/**
 * Alter the profile field's administration form. Vocabularies are referenced here
 * that supply the term names as options.
 * @param $form
 *   array of form content
 * @param $form_state
 *   array of form values
 */
function profile_taxonomy_form_profile_field_form_alter(&$form, $form_state) {
  $type = _profile_taxonomy_get_field_type($form); //determine field type

  switch ($type) { 
    case 'selection':
       profile_taxonomy_field_type_selection($form);
       //load terms dynamically when user selects a certain vocabulary
       drupal_add_js(drupal_get_path('module', 'profile_taxonomy') . '/profile_taxonomy.js');
  }
}

/**
 * Enhancement of the list selection field types enables the administrator to
 * select a vocabulary as a list data source.
 * @param $form
 *   profile field edit form
 */
function profile_taxonomy_field_type_selection(&$form) {
  $counter = 0;
  foreach ($form['fields'] as $key => &$field) {
    if (is_array($field)) {
      $field['#weight'] = $counter++; //set weight for form elements
      if ($key == 'options') { //inject vocabularies selection here.
        $vid = profile_taxonomy_get_vocabulary_id($form['fid']['#value']);
        $taxonomy = array( //create possible references to vocabularies
          '#type' => 'select',
          '#title' => t('Selection options from vocabulary (advanced)'),
          '#description' => t('Referenced vocabulary providing terms as selection options. NOTE: When choosing a vocabulary all containing terms names are imported to the "Selection options" text area from above.'),
          '#options' => _profile_taxonomy_vocabularies_options_list(),
          '#multiple' => FALSE,
          '#size' => 0,
          '#weight' => $counter++,
          '#default_value' => isset($vid) ? $vid : 0,
        );
      }
    }
  }
  $form['fields']['vocabulary'] = $taxonomy; //add vocabularies selection to form
  array_unshift($form['#submit'], 'profile_taxonomy_field_type_selection_submit'); //additional submit handler 
}

/**
 * Submit handler for field type selection.
 * @param $form
 * @param $form_state
 */
function profile_taxonomy_field_type_selection_submit($form, &$form_state) {
  //get submit parameter
  $fid = $form_state['values']['fid']; //profile field
  $vocabulary = $form_state['values']['vocabulary']; //assigned vocabulary
    
  if (!$form_state['values']['options']) {
    $tree = taxonomy_get_tree($vocabulary); //get taxonomy terms
    if ($tree) { //build tree, i. e. term list
      foreach ($tree as $term) 
        $form_state['values']['options'] .= $term->name . "\r\n";
    }
  }  

  //remove field assignment
  profile_taxonomy_delete_by_fid($fid);

  //create new fid/vid assignemnt
  if ($vocabulary)
    profile_taxonomy_add($fid, $vocabulary);

  drupal_set_message('Vocabulary settings have been saved.');
}

/**
 * Synchronize vocabularies with selection profile field options. As term
 * names are exported they have to be kept up to date when the referenced
 * vocabulary is changed.
 * @param $op
 *   operation, e. g. 'insert', 'update' or 'remove'
 * @param $type
 *   type, e. g. 'vocabulary' or 'term'
 * @param $array
 *   data depends on $type, e. g. vocabulary or term data.
 */
function profile_taxonomy_taxonomy($op, $type, $array = NULL) {
  switch ($type) {
    case 'vocabulary':
	  profile_taxonomy_taxonomy_vocabulary($op, $array);	
	  break;	
	case 'term':
	  profile_taxonomy_taxonomy_term($op, $array);
	  break; 
  }
}

/**
 * React when a referenced vocabulary is changed.
 * @param $op
 *   operation, e. g. 'insert', 'update' or 'remove'
 * @param $voc
 *   array of vocabulary data
 */
function profile_taxonomy_taxonomy_vocabulary($op, $voc) {
  switch ($op) {
    case 'delete':
      //get all profile fields which have assignments to this vocabulary
      $fields = profile_taxonomy_get_profile_fields($voc['vid']);
      foreach ($fields as $field) {
      	//delete profile field options
        db_query("UPDATE profile_fields SET options = '' WHERE fid = %d", $field->fid); 
		profile_taxonomy_delete_by_vid($voc['vid']); //remove assignment
      }	    
  }
}

/**
 * React when a term of a referenced vocabulary is changed.
 * @param $op
 *   operation, e. g. 'insert', 'update' or 'remove'
 * @param $term
 *   array of term data
 */
function profile_taxonomy_taxonomy_term($op, $term) {
			
  $fields = profile_taxonomy_get_profile_fields($term['vid']);
  $options = _profile_taxonomy_list_vocabulary_terms($term['vid']);
  
  if (!$options[$term['tid']]) //new term, add to options
    $options[$term['tid']] = $term['name'];  
		  
  foreach ($fields as $field) {
    if ($options[$term['tid']]) {//existing term
	  $option =& $options[$term['tid']];
	  
	  //match against single and multiple, values, e. g. "term" or "termA", "termB"
	  $result = db_query(
	  			"SELECT value FROM {profile_values} 
	  			WHERE fid = %d AND (value = '%s' OR value LIKE '%s' OR value LIKE '%s' OR value LIKE '%s')", 
	  			$field->fid, 
	  			$option, "$option,%", "%, $option,%", "%, $option");
	  $value = db_fetch_object($result)->value;
	  $bits = explode(',', $value);
	  if (!empty($bits)) {
	    foreach ($bits as $id => &$bit) {
	      $bit = trim($bit);
  		  if ($option == $bit) {
  		  	if ($op == 'update' || $op == 'instert')
  		  	  $bit = $term['name'];
  		  	elseif ($op == 'delete')
  		  	  unset($bits[$id]);
  		  }
	    }
	    $new_value = implode(', ', $bits);
	  }
	  else {
	    $new_value = $term['name'];
	  }
	 
	  switch ($op) {
	    case 'insert':
	    case 'update':
	   	  db_query("UPDATE profile_values SET value = '%s' WHERE fid = %d AND (value = '%s' OR value LIKE '%s' OR value LIKE '%s' OR value LIKE '%s')", $new_value, $field->fid, $option, "$option,%", "%, $option,%", "%, $option");
		  $option = $term['name'];
		  break;
	    case 'delete':
	      db_query("UPDATE profile_values SET value = '%s' WHERE fid = %d AND (value = '%s' OR value LIKE '%s' OR value LIKE '%s' OR value LIKE '%s')", $new_value, $field->fid, $option, "$option,%", "%, $option,%", "%, $option");
		  unset($options[$term['tid']]);
		  break;
	  }
	  
	  //update profile field options
	  sort($options);
	  $field->options = implode("\r\n", $options);
	  db_query("UPDATE profile_fields SET options = '%s' WHERE fid = %d", $field->options, $field->fid); 
    }
  }
}

/**
 * Alter a user profile according the terms context.
 * @param $op
 *   operation, e. g. load or view
 * @param $edit
 *   editing information array
 * @param $account
 *   user account information
 * @param $category
 *   profile category
 */
function profile_taxonomy_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      return profile_taxonomy_user_load($account);
  }
}

/**
 * Provide assigned user terms for programmatic use, e. g. devel load, user view etc.
 * @param $account
 *   user account
 */
function profile_taxonomy_user_load(&$account) {
  profile_taxonomy_init(); //in case hook_init() function wasn't called yet.
  $assignments = profile_taxonomy_get_assignments();

  $profiles = array();
  if (!empty($assignments)) {
    foreach ($assignments as $assignment) {
      $profile  = _profile_taxonomy_get_profile_field_by_id($assignment->fid); //get the profile field

      if ($profile && $profile->fid && $profile->name) {
        //get the term
        $term_name = $account->{$profile->name};
        $term = taxonomy_get_term_by_name($term_name);
        if ($term) { //attach term only if term exists
          $profiles[$profile->fid] = $profile;
          $profiles[$profile->fid]->terms[$term[0]->tid] = $term[0];
        }
      }
    }
  }
  if (!empty($profiles))
    $account->taxonomy = $profiles; //group terms by profile fields
}

/**
 * Get a list of all terms with their term id as key and
 * the term name as value.
 * @param $vid
 *   vocabulary id
 * @return
 *   associative array of vocabulary terms
 */
function _profile_taxonomy_list_vocabulary_terms($vid) {
	$options = array();
	$tree = taxonomy_get_tree($vid); //get taxonomy terms
  if ($tree) { //build tree, i. e. term list
    foreach ($tree as $term) 
       $options[$term->tid] = $term->name;
  }  
  return $options;
}

/**
 * Get the field type of this form by its form parameter.
 * @param $form
 * @return
 *   field type
 */
function _profile_taxonomy_get_field_type($form) {
  if (is_numeric($form['#parameters'][2])) { //profile field type edit form
    $profile =_profile_taxonomy_get_profile_field_by_id($form['#parameters'][2]);
    return $profile->type;
  }
  else { //profile field type add form
    return $form['#parameters'][2];
  }
}

/**
 * Get a profile field by id.
 * @param $fid
 *   profile field id
 * @return
 *   profile field object
 */
function _profile_taxonomy_get_profile_field_by_id($fid) {
  return db_fetch_object(db_query('SELECT * FROM {profile_fields} WHERE fid = %d', $fid));
}

/**
 * Prepare vocabularies in an array understandable
 * for a selection widget (drop-down).
 * @return
 *   associative array of vocabularies (id as key, name as value)
 */
function _profile_taxonomy_vocabularies_options_list() {
  $vocabs = taxonomy_get_vocabularies(); //get all vocabularies and provide terms

  $options = array();
  $options[] = t('- None selected -');
  foreach ($vocabs as $vid => $voc) //prepare vocabularies to be displayed in an option widget
    $options[$vid] = $voc->name;

  return $options;
}